#include "EpPartialDisplay.h"

const unsigned char EpPartialDisplay::lutGC1_FULL[] PROGMEM = {
        0x2A, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x05, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2A, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x05, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x03, 0x00,
        0x01, 0x03, 0x03, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x22, 0x22, 0x22, 0x22, 0x22
};

const unsigned char EpPartialDisplay::lutGC1_PARTIAL_1[] PROGMEM = {
        0x2A, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x05, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2A, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x05, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x03, 0x00,
        0x01, 0x03, 0x03, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x22, 0x22, 0x22, 0x22, 0x22
};

const unsigned char EpPartialDisplay::lutGC1_PARTIAL_2[] PROGMEM = {
        0x2A, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x05, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x2A, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x05, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x03, 0x00,
        0x01, 0x03, 0x03, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x22, 0x22, 0x22, 0x22, 0x22
};

const unsigned char EpPartialDisplay::lutGC1_DU1[] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0A, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x05, 0x05, 0x00,
        0x05, 0x03, 0x05, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x22, 0x22, 0x22, 0x22, 0x22
};

const unsigned char EpPartialDisplay::lutGC1_A2[] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
        0x22, 0x22, 0x22, 0x22, 0x22
};

EpPartialDisplay::EpPartialDisplay(Epepd &epepd) :
        EpFunction(epepd) {}

void EpPartialDisplay::display(EpBitmap* source, DisplayMode displayMode, EpBitmap* partial, EpBitmap* force) {
    epepd->initDisplay();

    switch (displayMode) {
        case GC2_FULL:
            epepd->writeLUT(lutGC1_FULL, sizeof(lutGC1_FULL));
            break;
        case GC2_PARTIAL:
            epepd->writeLUT(lutGC1_PARTIAL_1, sizeof(lutGC1_PARTIAL_1));
            break;
        case DU:
            epepd->writeLUT(lutGC1_DU1, sizeof(lutGC1_DU1));
            break;
        case A2:
            epepd->writeLUT(lutGC1_A2, sizeof(lutGC1_A2));
    }

    uint64_t start = esp_timer_get_time();
    epepd->getRedRam()->_streamBytesInBegin();
    epepd->getBwRam()->_streamBytesInBegin();
    epepd->getBwRam()->_streamBytesOutBegin();
    uint8_t src = 0x00; // new data
    uint8_t bw = 0x00; // old data
    uint8_t par = (partial) ? 0x00 : 0xFF; // partial update
    uint8_t fce = 0x00; // force update

    for (int16_t y = 0; y < epepd->EPD_HEIGHT; y++) {
        for (int16_t x = 0; x < epepd->EPD_WIDTH; x++) {
            // takes over 200ms, just calling functions (immediately return) takes 50ms
            src |= (source->getPixel(x, y) & 0x80) >> (x & 0b111);
            if (partial)
                par |= (partial->getPixel(x, y) & 0x80) >> (x & 0b111);
            if (fce)
                fce |= (force->getPixel(x, y) & 0x80) >> (x & 0b111);

            if ((x & 0b111) == 0b111) {
                // make sure each streamBytesNext is only called once
                bw = epepd->getBwRam()->_streamOutBytesNext();
                // derived from good old Kmap
                epepd->getRedRam()->_streamInBytesNext((~src & fce) | (bw & ~fce));
                epepd->getBwRam()->_streamInBytesNext((src & (fce | par)) | (bw & ~(fce | par)));
                src = 0x00;
                bw = 0x00;
                par = (partial) ? 0x00 : 0xFF;
                fce = 0x00;
            }
        }
    }
    Serial.printf("[epepd] EpPartialDisplay write ram took %lldus\n", esp_timer_get_time() - start);

    epepd->writeToDisplay();
    epepd->updateDisplay();

    if (displayMode == GC2_PARTIAL) {

    }
//    switch (mode) {
//        case GC2_FULL:
//        case DU:
//        case A2:
//
//    }

//    epepd->hibernate();
}

